import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

import { useState, useEffect } from 'react'

function randInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function Calendar({ begin, end, data, day_size }) {
  const difference = Math.abs(end - begin) / (1000 * 60 * 60 * 24)
  const space = 1

  let dates = []
  let dates_number = []
  for (let i = 0; i <= difference; i += space) {
    const cloneDate = new Date(begin.valueOf())
    cloneDate.setDate(begin.getDate() + i)
    dates.push(cloneDate)
    dates_number.push(Number(`${cloneDate.getFullYear()}${cloneDate.getMonth()}${cloneDate.getDate()}`))
  }

  const dataSorted = data.data.sort((a, b) => a[2] - b[2])

  console.log(dates_number)
  const dataByModels = {}
  data.data.forEach(d => {
    dataByModels[d[1]] ? dataByModels[d[1]].push(d) : dataByModels[d[1]] = [d]
  })

  return (
    <div className={styles.calendar}>
      {Object.keys(dataByModels).map(m => {

        const color = `hsl(${randInt(0, 360)},${randInt(50, 100)}%,${randInt(50, 100)}%)`
        return (<div className={styles.calendar_model}>
          {
            dates.map(d => (
              <div className={styles.calendar_elm}>
                <div className={styles.calendar_blocks}>
                  {data.data.filter((dd, i) => dd[2] == Number(d.toISOString().substr(0, 10).replace(/-/g, ''))).map(ddd => (
                    <div className={styles.calendar_block} style={{ width: ddd[4] / ddd[5] * (day_size / 8), backgroundColor: color }} >|</div>
                  ))}
                </div>
                <div className={styles.calendar_date}>{`${d.getDate()}/${d.getMonth()}`}</div>
              </div>
            ))
          }
        </div>)

      })}



    </div>)
}

export default function Home() {
  const [data, setData] = useState({})
  const [maxDate, setMaxDate] = useState(0)
  const [nowDate, setNowDate] = useState(0)
  const [daySize, setDaySize] = useState(15)

  useEffect(async () => {
    const res = await fetch("http://localhost:5000/api/dados")
    const newData = await res.json()
    setData(newData)
    console.log(newData)

    for (let d of newData?.data) {
      if (d[2] > maxDate)
        setMaxDate(String(d[2]))
    }

    setMaxDate(c => new Date(`${c.slice(0, 4)}/${c.slice(4, 6)}/${c.slice(6, 8)}`))

    const nowDate = new Date('2022/02/18')

    setNowDate(nowDate)


  }, [])

  useEffect(() => {
    document.querySelector(':root').style.setProperty('--day-size', daySize + "rem")
  }, [daySize])

  const handleWheel = (e) => {
    if (e.deltaY < 0)
      setDaySize(d => d + 0.5)
    else
      setDaySize(d => d - 0.5)

    console.log(daySize)
  }

  return (
    <div className={styles.container} onWheel={handleWheel}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          {nowDate && <Calendar begin={nowDate} end={maxDate} data={data} day_size={daySize} />}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
